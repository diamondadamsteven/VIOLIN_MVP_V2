#### .\.venv\Scripts\activate #####
#### .\venv\Scripts\activate #####
#### uvicorn SERVER_VIOLIN_MVP_START:app --host 0.0.0.0 --port 8000 --reload #####
#### to verify: http://localhost:8000 #####
#### to verify: 
""" curl -X POST "http://localhost:8000/CALL_SP" ^
  -H "Content-Type: application/json" ^
  -d "{\"SP_NAME\":\"P_CLIENT_VIOLINIST_INS\",\"PARAMS\":{\"DEVICE_ID\":\"abc\",\"IP_ADDRESS\":\"127.0.0.1\",\"LATITUDE\":10.77,\"LONGITUDE\":106.69}}"
 """
#### curl -X POST "http://192.168.1.131:8000'/CALL_SP" -H "Content-Type: application/json" -d "{\"SP_NAME\": \"P_CLIENT_DD_SONG\", \"PARAMS\": {\"VIOLINIST_ID\": 123, \"FILTER_TEXT\": \"bach\"}}"


#### pip freeze > SERVER_VIOLIN_MVP_requirements_DOT_VENV.txt ####
#### pip freeze > SERVER_VIOLIN_MVP_requirements_VENV.txt ####

#### dos prompt #2: ipconfig...get IPv4 Address and paste into CLIENT_STEP_1_REGISTER.js #####
#### npx expo start --clear ##### 

findstr /n "SERVER_ENGINE_SQLITE_LOGGING" *.py
Get-Process | Sort-Object WorkingSet -Descending | Select-Object ProcessName, Id, @{Name="Memory(MB)";Expression={[math]::Round($_.WorkingSet/1MB,2)}}, @{Name="Virtual(MB)";Expression={[math]::Round($_.VirtualMemorySize/1MB,2)}} | Format-Table -AutoSize | Out-File -FilePath "C:\Users\diamo\process_memory.txt" -Width 200

8/29/2025:
There are ways for Pyin and Crepe to trade accuracy for speed, 
 which is okay except for Vibrato-tracking and maybe Onset-timing-accuracy
Also, it is not clear than Crepe is needed if we are using Pyin

2) P_ENGINE_ALL_MASTER
4) FFT
5) Onset-only
6) VIBRATO: PYIN+IF?  

7) Real-time (ie, 1st pass) processing: 
   Crepe tiny or Pyin 50% 20ms with 500 ms frames
     for note and rest detection only 
   Meanwhile, run PYIN+IF or PYIN 75% or CREPE full behind the scenes 
      (perhaps on longer than 500 ms frames)
      and refresh the vibrato and more-accurate-intonation and Onsets  
         as it gets done, several seconds behind

3) Fix client-app bugs:
    1) Conductor's batons
    2) Conductor's thought-bubble-text
    3) Displaying notes/colors during recording
    4) Play-back the recording
    5) Practice mode
    6) Advanced line-charts

npx expo start --tunnel --clear
npx expo start --lan --clear

# Find all Python procetasklist | findstr python
sses
tasklist | findstr python

# Kill specific process IDstasklist | findstr python

taskkill /PID 41216 /F
taskkill /PID 55480 /F  
taskkill /PID 62900 /F

#### Step 1: Expo starts the app from index.js (or index.ts) #####
#### Step 2: App loads app/_layout.tsx (or app/_layout.jsx) #####
#### Step 3: Initial screen loads from app/(tabs)/index.tsx #####
#### github token: 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 #####
#### Server listener writes each frame to tmp/recordings/<RECORDING_ID>/<FRAME_NO>.m4a. ####
# One-time: open PowerShell as Administrator, cd to your project, then:

# Copy
# Edit
# powershell -ExecutionPolicy Bypass -File .\setup_server.ps1

# npx expo run:ios

-- SQL Server Linked Server Setup for SQLite Logging Database
-- Run this script in SQL Server Management Studio to create a linked server
-- that can read from the SQLite logging database

USE [master]
GO

-- Step 1: Enable Ad Hoc Distributed Queries (required for OLEDB)
EXEC sp_configure 'show advanced options', 1
RECONFIGURE
GO

EXEC sp_configure 'Ad Hoc Distributed Queries', 1
RECONFIGURE
GO

-- Step 2: Create the linked server to SQLite
-- Note: This uses the Microsoft OLE DB Provider for ODBC Drivers
EXEC sp_addlinkedserver 
    @server = 'SQLITE_VIOLIN_LOGGING',
    @srvproduct = 'SQLite',
    @provider = 'MSDASQL',
    @datasrc = 'SQLite_VIOLIN_MVP_2',
    @catalog = 'C:\Users\diamo\VIOLIN_MVP_V2\SQLite_VIOLIN_MVP_2.db'
GO

-- Step 3: Configure the linked server
EXEC sp_serveroption 
    @server = 'SQLITE_VIOLIN_LOGGING',
    @optname = 'rpc',
    @optvalue = 'true'
GO

EXEC sp_serveroption 
    @server = 'SQLITE_VIOLIN_LOGGING',
    @optname = 'rpc out',
    @optvalue = 'true'
GO

-- Step 4: Test the connection
-- This should return a list of tables from SQLite
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 'SELECT name FROM sqlite_master WHERE type="table"')
GO

-- Step 5: Create views for easy access to SQLite logging data
USE [VIOLIN]
GO

-- View for ENGINE_DB_LOG_FUNCTIONS
CREATE VIEW v_ENGINE_DB_LOG_FUNCTIONS_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_FUNCTIONS ORDER BY DT_ADDED DESC')
GO

-- View for ENGINE_DB_LOG_SPLIT_100_MS_AUDIO_FRAME
CREATE VIEW v_ENGINE_DB_LOG_SPLIT_100_MS_AUDIO_FRAME_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_SPLIT_100_MS_AUDIO_FRAME ORDER BY DT_ADDED DESC')
GO

-- View for ENGINE_DB_LOG_RECORDING_CONFIG
CREATE VIEW v_ENGINE_DB_LOG_RECORDING_CONFIG_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_RECORDING_CONFIG ORDER BY DT_ADDED DESC')
GO

-- View for ENGINE_DB_LOG_FUNCTION_ERROR
CREATE VIEW v_ENGINE_DB_LOG_FUNCTION_ERROR_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_FUNCTION_ERROR ORDER BY DT_ADDED DESC')
GO

-- View for ENGINE_DB_LOG_PROCESS_REGISTRY
CREATE VIEW v_ENGINE_DB_LOG_PROCESS_REGISTRY_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_PROCESS_REGISTRY ORDER BY dt_added DESC')
GO

-- View for ENGINE_DB_LOG_WEBSOCKET_CONNECTION
CREATE VIEW v_ENGINE_DB_LOG_WEBSOCKET_CONNECTION_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_WEBSOCKET_CONNECTION ORDER BY DT_CONNECTION_REQUEST DESC')
GO

-- View for ENGINE_DB_LOG_WEBSOCKET_MESSAGE
CREATE VIEW v_ENGINE_DB_LOG_WEBSOCKET_MESSAGE_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_WEBSOCKET_MESSAGE ORDER BY DT_MESSAGE_RECEIVED DESC')
GO

-- View for ENGINE_DB_LOG_STEPS
CREATE VIEW v_ENGINE_DB_LOG_STEPS_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_STEPS ORDER BY DT_ADDED DESC')
GO

-- View for ENGINE_DB_LOG_PRE_SPLIT_AUDIO_FRAME
CREATE VIEW v_ENGINE_DB_LOG_PRE_SPLIT_AUDIO_FRAME_SQLITE AS
SELECT * FROM OPENQUERY(SQLITE_VIOLIN_LOGGING, 
    'SELECT * FROM ENGINE_DB_LOG_PRE_SPLIT_AUDIO_FRAME ORDER BY DT_FRAME_RECEIVED DESC')
GO

-- Step 6: Create a unified view that combines SQL Server and SQLite data
-- This allows you to query both sources in one place
CREATE VIEW v_ALL_LOGGING_DATA AS
SELECT 
    'SQL Server' as data_source,
    'ENGINE_LOAD_HZ' as table_name,
    RECORDING_ID,
    START_MS,
    END_MS,
    SOURCE_METHOD,
    HZ,
    CONFIDENCE,
    AUDIO_FRAME_NO,
    SAMPLE_RATE,
    NULL as dt_added
FROM ENGINE_LOAD_HZ
UNION ALL
SELECT 
    'SQLite' as data_source,
    'ENGINE_DB_LOG_FUNCTIONS' as table_name,
    RECORDING_ID,
    NULL as START_MS,
    NULL as END_MS,
    PYTHON_FUNCTION_NAME as SOURCE_METHOD,
    NULL as HZ,
    NULL as CONFIDENCE,
    FRAME_NO as AUDIO_FRAME_NO,
    NULL as SAMPLE_RATE,
    DT_ADDED
FROM v_ENGINE_DB_LOG_FUNCTIONS_SQLITE
GO

-- Step 7: Test the views
-- Test individual views
SELECT TOP 10 * FROM v_ENGINE_DB_LOG_FUNCTIONS_SQLITE
GO

SELECT TOP 10 * FROM v_ENGINE_DB_LOG_SPLIT_100_MS_AUDIO_FRAME_SQLITE
GO

-- Test unified view
SELECT TOP 20 * FROM v_ALL_LOGGING_DATA ORDER BY dt_added DESC
GO

PRINT 'SQL Server Linked Server setup completed successfully!'
PRINT 'You can now query SQLite logging data using the views:'
PRINT '  - v_ENGINE_DB_LOG_FUNCTIONS_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_SPLIT_100_MS_AUDIO_FRAME_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_RECORDING_CONFIG_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_FUNCTION_ERROR_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_PROCESS_REGISTRY_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_WEBSOCKET_CONNECTION_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_WEBSOCKET_MESSAGE_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_STEPS_SQLITE'
PRINT '  - v_ENGINE_DB_LOG_PRE_SPLIT_AUDIO_FRAME_SQLITE'
PRINT '  - v_ALL_LOGGING_DATA (unified view)'
GO
